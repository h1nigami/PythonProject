from aiogram.fsm.context import FSMContext
from data import DataBase, owner
from loader import dp, bot
from permissions import IsAdminCall, IsAdminMessage
from states import AddGroup, AddTeacher, Misstake
from aiogram import types, F
from keyboards.admin.inline import *

db = DataBase()
pending_teachers = dict()


@dp.message(F.text == '/start')
async def handle_start(message: types.Message, state: FSMContext):
    teacher = db.get_teacher(message.from_user.id)
    if not teacher:
        pending_teachers[message.from_user.id] = {
            'tg_id': message.from_user.id,
            'username': message.from_user.username,
        }
        await message.answer('üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
        await bot.send_message(
            chat_id=owner,
            text=f'üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n'
                 f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                 f'üÜî ID: {message.from_user.id}',
            reply_markup=teacher_registration(
                tg_id=message.from_user.id,
                username=message.from_user.username
            )
        )
    else:
        await message.answer('‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')


@dp.callback_query(F.data.startswith('registration:'))
async def approve_teacher(callback: types.CallbackQuery, state: FSMContext):
    _, tg_id, username = callback.data.split(':')
    tg_id = int(tg_id)

    if tg_id not in pending_teachers:
        await callback.message.edit_text('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
        return

    user_data = pending_teachers[tg_id]
    db.add_teacher(tg_id=user_data['tg_id'], name=user_data['username'])

    await callback.message.edit_text(
        text=f'‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å @{user_data["username"]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        reply_markup=admin_panel()
    )

    await bot.send_message(
        chat_id=tg_id,
        text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n'
             '–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã.'
    )

    del pending_teachers[tg_id]


@dp.callback_query(F.data == 'exit')
async def return_to_admin_panel(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(
        '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        reply_markup=admin_panel()
    )


@dp.message(F.text == '308012')
async def admin_access(message: types.Message):
    await message.answer(
        '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        reply_markup=admin_panel()
    )


@dp.callback_query(F.data == 'list_teachers')
async def show_teachers_list(call: types.CallbackQuery):
    teachers_list = db.get_all_teachers
    if not teachers_list:
        await call.message.edit_text(
            'üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç',
            reply_markup=admin_panel()
        )
        return

    await call.message.edit_text(
        'üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π',
        reply_markup=teachers(teachers_list)
    )


@dp.callback_query(F.data == 'new_teacher')
async def start_adding_teacher(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddTeacher.name)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    )


@dp.message(AddTeacher.name)
async def get_teacher_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        'üÜî –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:'
    )
    await state.set_state(AddTeacher.tg_id)


@dp.message(AddTeacher.tg_id)
async def complete_teacher_add(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            '‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID:'
        )
        return

    await state.update_data(tg_id=int(message.text))
    data = await state.get_data()
    db.add_teacher(name=data['name'], tg_id=data['tg_id'])

    await message.answer(
        f'‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {data["name"]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        reply_markup=admin_panel()
    )
    await state.clear()


@dp.callback_query(F.data.startswith('teacher:'))
async def show_teacher_details(callback: types.CallbackQuery):
    teacher_id = int(callback.data.split(':')[1])
    teacher = db.get_teacher(tg_id=teacher_id)

    if not teacher:
        await callback.message.edit_text(
            '‚ö†Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=admin_panel()
        )
        return

    groups = ', '.join([group.name for group in teacher.groups]) if teacher.groups else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã'
    notes = teacher.notes if teacher.notes else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'

    await callback.message.edit_text(
        text=f'üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n'
             f'üìå –§–ò–û: {teacher.name}\n'
             f'üë• –ì—Ä—É–ø–ø—ã: {groups}\n'
             f'üìù –ó–∞–º–µ—á–∞–Ω–∏—è: {notes}\n'
             f'‚≠ê –ë–∞–ª–ª—ã: {teacher.scores}',
        reply_markup=about(teacher)
    )


@dp.callback_query(F.data.startswith('delete:'))
async def delete_teacher(call: types.CallbackQuery):
    teacher_id = int(call.data.split(':')[1])
    db.delete_teacher(tg_id=teacher_id)

    await call.message.edit_text(
        'üóëÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω',
        reply_markup=admin_panel()
    )


@dp.callback_query(F.data.startswith('misstake:'))
async def report_mistake(call: types.CallbackQuery, state: FSMContext):
    teacher_id = int(call.data.split(':')[1])
    await state.set_state(Misstake.problem)
    await state.update_data(tg_id=teacher_id)

    await call.message.edit_text(
        'üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/–∑–∞–º–µ—á–∞–Ω–∏–µ:',
        reply_markup=main_menu()
    )


@dp.message(Misstake.problem)
async def get_mistake_description(msg: types.Message, state: FSMContext):
    await state.update_data(problem=msg.text)
    await state.set_state(Misstake.group_name)
    data = await state.get_data()

    groups_list = db.get_teachers_group(data['tg_id'])
    if groups_list:
        await msg.answer(
            'üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞:',
            reply_markup=groups(groups_list)
        )
    else:
        await state.set_state(Misstake.scores)
        await msg.answer(
            'üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –≤—ã—á–µ—Ç–∞:',
            reply_markup=main_menu()
        )


@dp.callback_query(Misstake.group_name)
async def select_group_for_mistake(call: types.CallbackQuery, state: FSMContext):
    group_id = int(call.data.split(':')[1])
    group = db.get_one_group(group_id)
    await state.update_data(group=group)
    await state.set_state(Misstake.scores)

    await call.message.answer(
        'üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –≤—ã—á–µ—Ç–∞:',
        reply_markup=main_menu()
    )


@dp.message(Misstake.scores)
async def process_score_deduction(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer(
            '‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
            reply_markup=main_menu()
        )
        return

    await state.update_data(scores=int(msg.text))
    data = await state.get_data()

    group_info = f"–≤ –≥—Ä—É–ø–ø–µ {data['group'].name} " if data.get('group') else ""
    problem_text = f"{group_info}{data['problem']}"

    db.subtract_score(
        tg_id=data['tg_id'],
        value=data['scores'],
        note=problem_text
    )

    await msg.answer(
        '‚úÖ –ó–∞–º–µ—á–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ',
        reply_markup=admin_panel()
    )

    try:
        await bot.send_message(
            chat_id=data['tg_id'],
            text=f'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n'
                 f'‚ùó –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–º–µ—á–∞–Ω–∏–µ: {problem_text}\n'
                 f'‚ûñ –°–Ω—è—Ç–æ –±–∞–ª–ª–æ–≤: {data["scores"]}\n\n'
                 f'‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await msg.answer(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é',
            reply_markup=admin_panel()
        )

    await state.clear()


@dp.callback_query(F.data.startswith('new_group:'))
async def start_adding_group(call: types.CallbackQuery, state: FSMContext):
    teacher_id = int(call.data.split(':')[1])
    await state.set_state(AddGroup.group_name)
    await state.update_data(tg_id=teacher_id)

    await call.message.answer(
        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:',
        reply_markup=main_menu()
    )


@dp.message(AddGroup.group_name)
async def complete_group_add(message: types.Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    data = await state.get_data()
    db.create_group(
        group_name=data['group_name'],
        teacher_tg_id=data['tg_id']
    )

    await message.answer(
        f'‚úÖ –ì—Ä—É–ø–ø–∞ "{data["group_name"]}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
        reply_markup=admin_panel()
    )
    await state.clear()